// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  // always private
  email     String  @default(" ")
  password  String
  // always public
  account   String  @id @unique
  bio       String  @default(" ")
  username  String
  isPublic  Boolean @default(true)
  avatarUrl String  @default(" ")

  // optional public
  post             Post[] @relation("user_post")
  follower         User[] @relation("follower_following", references: [account])
  following        User[] @relation("follower_following", references: [account])
  followReqToMe    User[] @relation("followReq", references: [account])
  followReqToOther User[] @relation("followReq", references: [account])

  like      Like[]
  ////
  comment   Comment[]
  reComment ReComment[]
  chatRoom  ChatRoom[]
  sentchat  Chat[]      @relation("sender")
  viewChat  Chat[]      @relation("viewer", references: [id])
}

model Like {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [account], references: [account])
  post    Post   @relation(fields: [postId], references: [id])
  account String
  postId  Int

  @@unique([account, postId])
}

model Post {
  id      Int      @id @default(autoincrement())
  user    User     @relation("user_post", fields: [account], references: [account])
  like    Like[]
  photo   String[]
  public  Boolean  @default(true)
  account String
  caption String[]

  hashtag   Hashtag[]   @relation("hashtag", references: [name])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  ////
  comment   Comment[]
  reComment ReComment[]
}

model Hashtag {
  name String @id
  post Post[] @relation("hashtag", references: [id])
}

model Comment {
  id        Int         @id @default(autoincrement())
  text      String[]
  post      Post        @relation(fields: [postId], references: [id])
  user      User        @relation(fields: [account], references: [account])
  postId    Int
  account   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  //
  reComment ReComment[]
}

model ReComment {
  id        Int      @id @default(autoincrement())
  text      String[]
  post      Post     @relation(fields: [postId], references: [id])
  root      Comment  @relation(fields: [rootId], references: [id])
  user      User     @relation(fields: [account], references: [account])
  postId    Int
  rootId    Int
  account   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
}

model ChatRoom {
  id   Int    @id @default(autoincrement())
  user User[]
  chat Chat[]

  updatedAt DateTime @updatedAt
}

model Chat {
  id        Int      @id @default(autoincrement())
  text      String   @default(" ")
  read      Boolean  @default(false)
  roomId    Int
  account   String
  createdAt DateTime @default(now())

  sender   User     @relation("sender", fields: [account], references: [account])
  viewer   User[]   @relation("viewer", references: [account])
  chatRoom ChatRoom @relation(fields: [roomId], references: [id])
}
